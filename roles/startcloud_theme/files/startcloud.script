/*
 * Related to the screen
 */
 
screen_width = Window.GetWidth();
screen_height = Window.GetHeight();
screen_x = Window.GetX();
screen_y = Window.GetY();

/*
 * Images, check bits per pixel
 * and load images accordingly
 */

background_image = Image("startcloud.png");
passw_dialog_input_image = Image("entry.png");
lock_image = Image("lock.png");
capslock_image = Image("capslock.png");
bullet_image = Image("bullet.png");

bpp = Window.GetBitsPerPixel();

/* Use available images only */
logotype_image = Image("logo.png");
/* Scale logo to 60% smaller (40% of original size) */
logotype_image = logotype_image.Scale(logotype_image.GetWidth() * 0.4, logotype_image.GetHeight() * 0.4);

/* Create simple progress elements from available images */
progress_meter_image = Image("entry-nolock.png"); /* Use entry-nolock.png as progress background */
progress_fade_image = Image("bullet.png"); /* Use bullet.png as progress fill */
fsck_progress_meter_image = Image("entry-nolock.png");
fsck_progress_fade_image = Image("bullet.png");

/*
 * Sprites
 */

ratio = screen_height / screen_width;
background_ratio = background_image.GetHeight() / background_image.GetWidth();
factor = 0;

if (ratio > background_ratio) {
	factor = screen_height / background_image.GetHeight();
}
else {
	factor = screen_width / background_image.GetWidth();
}

scaled = background_image.Scale(background_image.GetWidth() * factor, background_image.GetHeight() * factor);
background_sprite = Sprite(scaled);
background_sprite.SetX(screen_x + screen_width / 2 - scaled.GetWidth() / 2);
background_sprite.SetY(screen_y + screen_height / 2 - scaled.GetHeight() / 2);

logotype_sprite = Sprite(logotype_image);

fsck_progress_meter_sprite = Sprite(fsck_progress_meter_image);
fsck_progress_fade_sprite = Sprite(fsck_progress_fade_image.Scale(1, fsck_progress_fade_image.GetHeight()));

passw_dialog_input_sprite = Sprite(passw_dialog_input_image);
lock_sprite = Sprite(lock_image);
capslock_sprite = Sprite(capslock_image);
passw_lbl_sprite = Sprite();

msg_label_sprite = Sprite();

/*
 * Misc variables
 */

counter = 0;

fade_pos_x = (screen_width / 2) - (progress_meter_image.GetWidth() / 2);
fade_dir = 0; /* 0 = right, 1 = left */

fsck_running = 0;
fsck_dev_array = [];
fsck_dev_counter = 0;
fsck_fade_in_counter = 0;
fsck_done_fading = 0;

stars_array = [];
stars_n = 0;

msgs_line = [];
for (i = 0; i < 5; i++) {
	msgs_line[i] = NULL;
}

/*
 * Debug related
 */
 
debug = 0;
debug_sprite = Sprite();
frame_debug_sprite = Sprite();
last_time = 0;
frame_counter = 0;

fun debugOutput(str) {
	/*
	 * Position debug logs 5% below animation, with 25% margin from bottom
	 * Animation is at: screen_y + (screen_height / 2) - 240
	 * Debug position: 5% below animation but respecting 25% bottom margin
	 */
	animation_bottom = screen_y + (screen_height / 2) - 240 + (animation_frames[0].GetHeight() / 2);
	debug_y = animation_bottom + (screen_height * 0.05);
	/* Ensure we don't go below 25% from bottom */
	max_debug_y = screen_y + (screen_height * 0.75);
	if (debug_y > max_debug_y) {
		debug_y = max_debug_y;
	}
	debug_sprite.SetImage(Image.Text(str, 1, 1, 1));
	debug_sprite.SetPosition(screen_x + 10, debug_y);
}

/*
 * Setup the graphics properties
 */
/* Position logo in bottom left corner with some padding */
logotype_sprite.SetPosition(screen_x + 20, screen_y + screen_height - logotype_image.GetHeight() - 20);
fsck_progress_meter_sprite.SetPosition(screen_x + (screen_width / 2) - (progress_meter_image.GetWidth() / 2), screen_y + (screen_height / 2) + (logotype_image.GetHeight() / 2) + 25);
fsck_progress_fade_sprite.SetPosition(screen_x + (screen_width / 2) - (progress_meter_image.GetWidth() / 2), screen_y + (screen_height / 2) + (logotype_image.GetHeight() / 2) + 25);
fsck_progress_meter_sprite.SetOpacity(0);
fsck_progress_fade_sprite.SetOpacity(0);
/* Position entry field to the right, with space for lock on the left */
passw_dialog_input_sprite.SetPosition(screen_x + (screen_width / 2) - (passw_dialog_input_image.GetWidth() / 2) + (lock_image.GetWidth() / 2), screen_y + screen_height - passw_dialog_input_image.GetHeight() - 40);
passw_dialog_input_sprite.SetOpacity(0);
/* Position lock icon to the left of the input field, side by side */
lock_sprite.SetPosition(screen_x + (screen_width / 2) - (passw_dialog_input_image.GetWidth() / 2) - (lock_image.GetWidth() / 2), screen_y + screen_height - passw_dialog_input_image.GetHeight() - 40);
lock_sprite.SetOpacity(0);
capslock_sprite.SetOpacity(0);
passw_lbl_sprite.SetOpacity(0);

spin = 0;

/*
 * This function only goes up to 100
 * because thats all thats needed for
 * the progress meter bar
 */
fun atoi(str) {
	int = -1;
	
	for (i = 0; i <= 100; i++) {
		if (i + "" == str) {
			int = i;
			break;
		}
	}
	
	return int;
}

/*
 * Animation setup
 */
animation_frames = [];
for (i = 1; i <= 13; i++) {
	if (i < 10) {
		frame_name = "animation-000" + i + ".png";
	} else {
		frame_name = "animation-00" + i + ".png";
	}
	animation_frames[i-1] = Image(frame_name);
}

animation_sprite = Sprite();
animation_sprite.SetX(screen_x + (screen_width / 2) - (animation_frames[0].GetWidth() / 2));
animation_sprite.SetY(screen_y + (screen_height / 2) - (animation_frames[0].GetHeight() / 2) - 240);

progress = 0;

fun refreshHandler() {
	/* Use frame counter for consistent timing instead of progress counter */
	frame_counter++;
	
	/* Change animation frame every 3 refresh cycles for consistent 16-17 FPS */
	current_frame = Math.Int(frame_counter / 3) % 13;
	animation_sprite.SetImage(animation_frames[current_frame]);
	
	/* Update frame debug info if debug mode is enabled (upper right) */
	if (debug == 1) {
		frame_debug_text = "Frame: " + current_frame + " | Cycle: " + frame_counter;
		frame_debug_sprite.SetImage(Image.Text(frame_debug_text, 1, 1, 1));
		frame_debug_sprite.SetPosition(screen_x + screen_width - 300, screen_y + 10);
	}
	
	if (fade_dir == 0) {
		counter++;
		
		if (counter >= 200) {
			fade_dir = 1;
		}
	}
	else {
		counter--;
		
		if (counter <= 0) {
			fade_dir = 0;
		}
	}
	
	if ((fsck_running == 1) && (fsck_done_fading == 0)) {
		fsck_progress_meter_sprite.SetOpacity(fsck_fade_in_counter);
		fsck_progress_fade_sprite.SetOpacity(fsck_fade_in_counter);
		
		if (fsck_fade_in_counter < 1) {
			fsck_fade_in_counter += 0.025;
		}
		else {
			fsck_done_fading = 1;
		}
	}
}

Plymouth.SetRefreshFunction(refreshHandler);

/*
 * Keyboard handler for debug toggle
 */
fun keyboardHandler(key) {
	/* Toggle debug output with 'd' key */
	if (key == "d") {
		if (debug == 0) {
			debug = 1;
			/* Show initial debug info */
			debugOutput("Debug Mode ON - System logs will appear here");
		} else {
			debug = 0;
			/* Clear both debug displays */
			debug_sprite.SetImage(Image(""));
			frame_debug_sprite.SetImage(Image(""));
		}
	}
}

Plymouth.SetKeyboardInputFunction(keyboardHandler);

/*
 * This function will display the password related information
 * when being prompt with entering a password
 */
fun showPasswordHandler(prompt, stars) {
	if (passw_dialog_input_sprite.GetOpacity() == 0 && passw_lbl_sprite.GetOpacity() == 0) {
		passw_dialog_input_sprite.SetOpacity(1);
		lock_sprite.SetOpacity(1);
		passw_lbl_sprite.SetOpacity(1);
	}
	
	tmp_prompt_image = Image.Text(prompt, 1, 1, 1);

	passw_lbl_sprite.SetImage(tmp_prompt_image);
	passw_lbl_sprite.SetPosition(screen_x + (screen_width / 2) - (tmp_prompt_image.GetWidth() / 2), screen_y + screen_height - passw_dialog_input_image.GetHeight() - 70);
	
	for(i = 0; i < stars_n; i++) {
		stars_array[i] = NULL;
	}
	
	stars_n = 0;

	/* Calculate bullet starting position for bottom placement, accounting for shifted entry field */
	bullet_start_x = screen_x + (screen_width / 2) - (passw_dialog_input_image.GetWidth() / 2) + (lock_image.GetWidth() / 2) + 10;
	bullet_y = screen_y + screen_height - passw_dialog_input_image.GetHeight() - 30;
	
	for(i = 0; (i < stars) && (i < 15); i++) {
		stars_array[i] = Sprite(bullet_image);
		stars_array[i].SetPosition(bullet_start_x + (i * 20), bullet_y);
		stars_n++;
	}
}

Plymouth.SetDisplayPasswordFunction(showPasswordHandler);

fun displayNormalHandler() {
	/*
	 * Hide the password dialog, lock icon, and the bullets
	 */
	
	if (passw_dialog_input_sprite.GetOpacity() == 1) {
		passw_dialog_input_sprite.SetOpacity(0);
	}
	
	if (lock_sprite.GetOpacity() == 1) {
		lock_sprite.SetOpacity(0);
	}
	
	if (passw_lbl_sprite.GetOpacity() == 1) {
		passw_lbl_sprite.SetOpacity(0);
	}
	
	for(i = 0; i < stars_n; i++) {
		stars_array[i] = NULL;
	}
}

Plymouth.SetDisplayNormalFunction(displayNormalHandler);

fun strlen(string) {
	i = 0;
	
	while (String(string).CharAt(i)) {
		i++;
	}
	
	return i;
}

/*
 * This function will display the most current message
 */
fun messageHandler(msg) {
	if ((msg == "") || !msg) {
		return 0;
	}
	
	if (msg.SubString(0, 5) == "keys:") {
		msg = msg.SubString(5, strlen(msg));
	}

	/* Get the message without the "fsckd-cancel-msg" prefix as we don't support i18n */
	if (msg.SubString(0, 17) == "fsckd-cancel-msg:") {
		msg = msg.SubString(17, strlen(msg));
	}
	
	for(i = 4; i > 0; i--) {
		msgs_line[i] = msgs_line[i - 1];
	}
	
	msgs_line[0] = Sprite(Image.Text(msg, 1, 1, 1));
	
	dist = 1;
	
	for(i = 0; i < 5; i++) {
		if (msgs_line[i] != NULL) {
			msgs_line[i].SetPosition(screen_x + (screen_width / 2) - (msgs_line[i].GetImage().GetWidth() / 2), screen_y + (screen_height - msgs_line[i].GetImage().GetHeight()) - 20*dist);
			dist++;
		}
	}
}

Plymouth.SetMessageFunction(messageHandler);

/*
 * Handles the updates passed to the plymouth daemon
 * for example the FSCK data
 */
fun statusHandler(status) {
	tmp_char = "";
	status_array = [];
	status_array[0] = "";
	elem_count = 0;
	
	for (i = 0; String(status).CharAt(i) != ""; i++) {
		tmp_char = String(status).CharAt(i);
		
		if (tmp_char != ":") {
			status_array[elem_count] += tmp_char;
		}
		else {
			elem_count++;
			status_array[elem_count] = "";
		}
	}

	if (status_array[0] == "fsck") {
		already_added = 0;
		
		if (fsck_running == 0) {
			/*
			 * use the dedicated message handler for this
			 * since there is no messages about fsck checks
			 * currently...
			 */
			messageHandler("Routine disk drive check.");
			
			fsck_running = 1;
		}
		
		for(i = 0; i < fsck_dev_counter; i++) {
			/* 
			 * check if the device already exist and update
			 * the progress only in that case
			 */
			if (fsck_dev_array[i][0] == status_array[1]) {
				fsck_dev_array[i][1] = status_array[2]; /* progress */
				already_added = 1;
			}
		}

		/*
		 * if the device is not added, then add it
		 */
		if (already_added == 0) {
			fsck_dev_array[fsck_dev_counter] = [];
			fsck_dev_array[fsck_dev_counter][0] = status_array[1]; /* device */
			fsck_dev_array[fsck_dev_counter][1] = status_array[2]; /* progress */
			fsck_dev_counter++;
		}
	
		/*
		 * update the progress
		 */
		
		total = 0;
		
		for(i = 0; i < fsck_dev_counter; i++) {
			total += atoi(fsck_dev_array[i][1]);
		}

		if (fsck_dev_counter > 0) {
			/*
			 * display the total percentage
			 */
			fsck_progress_fade_sprite.SetImage(fsck_progress_fade_image.Scale((fsck_progress_meter_image.GetWidth() / 100) * (total / fsck_dev_counter), fsck_progress_fade_image.GetHeight()));
		}
		
		/*
		 * if the total progress is at maximum, 
		 * make the progress meter go away,
		 * we might want to fade this out...
		 */	
		if (total == (100 * fsck_dev_counter)) {
			fsck_progress_meter_sprite.SetOpacity(0);
			fsck_progress_fade_sprite.SetOpacity(0);
		}
	}

	/* systemd-fsckd pass fsckd:<number_devices>:<progress>:<l10n_string> */
	if (status_array[0] == "fsckd") {
		fsck_running = 1;

		/* remove ",x" as we only care about integers */
		progress_str = status_array[2];
		if (strlen(progress_str) > 2) {
			progress = atoi(progress_str.SubString(0, strlen(progress_str) - 2));
		} else {
			progress = atoi(progress_str);
		}

		fsck_progress_fade_sprite.SetImage(fsck_progress_fade_image.Scale((fsck_progress_meter_image.GetWidth() / 100) * progress, fsck_progress_fade_image.GetHeight()));

		/*
		 * if the total progress is at maximum, 
		 * make the progress meter go away,
		 * we might want to fade this out...
		 */	
		if (progress == 100) {
			fsck_progress_meter_sprite.SetOpacity(0);
			fsck_progress_fade_sprite.SetOpacity(0);
		}
	}
}

Plymouth.SetUpdateStatusFunction(statusHandler);
