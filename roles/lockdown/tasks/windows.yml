---
#-
#  name: "Disabling unnecessary Windows services for security"
#  when: 
#    - lockdown is defined
#    - lockdown | length > 0
#  ansible.windows.win_service:
#    name: "{{ item }}"
#    state: stopped
#    start_mode: disabled
#  loop: "{{ lockdown }}"
#  ignore_errors: true

-
  name: "Changing default user password (using settings password)"
  when: 
    - lockdown_use_settings_password | default(false)
    - vagrant_user_pass is defined
  ansible.windows.win_user:
    name: "{{ ansible_user | default('vagrant') }}"
    password: "{{ vagrant_user_pass }}"
    state: present

-
  name: "Changing default user password (using lockdown password)"
  when: 
    - not (lockdown_use_settings_password | default(false))
    - lockdown_new_password is defined
  ansible.windows.win_user:
    name: "{{ ansible_user | default('vagrant') }}"
    password: "{{ lockdown_new_password }}"
    state: present

-
  name: "Configuring Windows Firewall for enhanced security"
  when: lockdown_enable_firewall | default(true)
  ansible.windows.win_firewall:
    state: enabled
    profiles:
      - Domain
      - Private
      - Public

#-
#  name: "Configuring Windows security policies via registry"
#  when: lockdown_security_policies | default(false)
#  ansible.windows.win_regedit:
#    path: "{{ item.path }}"
#    name: "{{ item.name }}"
#    data: "{{ item.data }}"
#    type: "{{ item.type | default('dword') }}"
#  loop:
#    - path: "HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa"
#      name: "LmCompatibilityLevel"
#      data: 5
#      type: "dword"
#    - path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters"
#      name: "RequireSecuritySignature"
#      data: 1
#      type: "dword"
#    - path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\LanmanWorkstation\\Parameters"
#      name: "RequireSecuritySignature"
#      data: 1
#      type: "dword"
#  ignore_errors: true
#
#-
#  name: "Configuring Windows Defender settings"
#  when: lockdown_configure_defender | default(true)
#  ansible.windows.win_powershell:
#    script: |
#      # Enable Windows Defender Real-time Protection
#      Set-MpPreference -DisableRealtimeMonitoring $false
#      
#      # Enable Cloud-delivered Protection
#      Set-MpPreference -MAPSReporting Advanced
#      
#      # Enable Automatic Sample Submission
#      Set-MpPreference -SubmitSamplesConsent SendAllSamples
#      
#      Write-Output "Windows Defender configured for enhanced security"
#  ignore_errors: true
#
#-
#  name: "Disabling Guest account"
#  ansible.windows.win_user:
#    name: "Guest"
#    account_disabled: true
#  ignore_errors: true
#
#-
#  name: "Configuring User Account Control (UAC)"
#  when: lockdown_configure_uac | default(true)
#  ansible.windows.win_regedit:
#    path: "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System"
#    name: "{{ item.name }}"
#    data: "{{ item.data }}"
#    type: "dword"
#  loop:
#    - name: "ConsentPromptBehaviorAdmin"
#      data: 2
#    - name: "ConsentPromptBehaviorUser"
#      data: 3
#    - name: "EnableLUA"
#      data: 1
#    - name: "PromptOnSecureDesktop"
#      data: 1
#  ignore_errors: true

-
  name: "Reset WinRM connection to apply user changes"
  ansible.builtin.meta: reset_connection

-
  name: "Cleaning up specified sensitive files and directories"
  when: 
    - lockdown_file_cleanups_list is defined
    - lockdown_file_cleanups_list | length > 0
  ansible.windows.win_file:
    path: "{{ item }}"
    state: absent
  loop: "{{ lockdown_file_cleanups_list }}"
  loop_control:
    label: "{{ item }}"
  ignore_errors: true

-
  name: "Removing temporary files and caches"
  when: lockdown_cleanup_temp | default(true)
  ansible.windows.win_file:
    path: "{{ item }}"
    state: absent
  loop:
    - "C:\\Windows\\Temp\\*"
    - "C:\\Users\\*\\AppData\\Local\\Temp\\*"
    - "C:\\Windows\\Prefetch\\*"
  ignore_errors: true

-
  name: "Clearing Windows event logs (if specified)"
  when: lockdown_clear_event_logs | default(false)
  ansible.windows.win_powershell:
    script: |
      $logs = Get-WinEvent -ListLog * | Where-Object {$_.RecordCount -gt 0}
      foreach ($log in $logs) {
        try {
          Clear-WinEvent -LogName $log.LogName -Force
          Write-Output "Cleared log: $($log.LogName)"
        } catch {
          Write-Output "Could not clear log: $($log.LogName) - $($_.Exception.Message)"
        }
      }
  ignore_errors: true
