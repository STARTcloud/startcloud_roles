---
-
  name: "Expanding Root Disk"
  become: true
  become_user: root
  when:
    - not vm_encrypted
    - ansible_os_family == 'Debian'    
  block:
    -
      name: "Setting root partition fact"
      ansible.builtin.set_fact:
        root_partition: "{{ ansible_mounts | selectattr('mount', '==', '/') | map(attribute='device') | first | regex_replace('^/dev/', '') }}"

    -
      name: "Setting root partition fact"
      ansible.builtin.set_fact:
        root_disk: "{{ root_partition | regex_replace('[0-9]+$', '') }}"
        root_partition_number: "{{ root_partition | regex_search('[0-9]+$') }}"

    -
      name: "Extending the unecrypted Root Partition"
      ansible.builtin.shell: "{{ item }}"
      ignore_errors: true
      with_items:
        - "growpart /dev/{{ root_disk }} {{ root_partition_number }}"
        - "resize2fs /dev/{{ root_partition }}"

-
  name: "Expanding the Encrypted Root Disk"
  become: true
  become_user: root
  when:
    - vm_encrypted
    - ansible_os_family == 'Debian'
  block:
    -
      name: "Setting root partition fact"
      ansible.builtin.set_fact:
        root_partition: "{{ ansible_mounts | selectattr('mount', '==', '/') | map(attribute='device') | first | regex_replace('^/dev/', '') }}"

    -
      name: "Setting root partition fact"
      ansible.builtin.set_fact:
        root_disk: "{{ root_partition | regex_replace('[0-9]+$', '') }}"
        root_partition_number: "{{ root_partition | regex_search('[0-9]+$') }}"

    -
      name: "Extending the Encrypted Root Partition"
      ansible.builtin.shell: "{{ item }}"
      ignore_errors: true
      with_items:
        - "growpart /dev/{{ root_disk }} {{ root_partition_number }}"
        - "echo {{ root_unlock_key }} | sudo cryptsetup resize /dev/mapper/{{ root_partition }}_crypt"
        - "pvresize /dev/mapper/{{ root_partition }}_crypt"
        - "lvresize -l+100%FREE /dev/crypt/root"
        - "resize2fs /dev/mapper/crypt-root"

#-
#  name: "Configuring Extra Disks for bhyve"
#  become: true
#  become_user: root
#  when: 
#    - disks.additional_disks[0] is defined
#    - disks.additional_disks[0] is not string
##    - disks.additional_disks[0] is not mapping
##    - disks.additional_disks[0] is iterable
#    - disks.additional_disks[0] | length > 0
#    - ansible_virtualization_type != "virtualbox"
#  block:
#    -
#      name: "Creating Mount Points"
#      become: true
#      ansible.builtin.file:
#        path: "{{ item }}"
#        state: directory
#      with_items: "{{ disks.additional_disks[0].mount }}"
#
#    - 
#      name: "Creating a {{ disks.additional_disks[0].filesystem }} filesystems on partitions"
#      ansible.builtin.filesystem:
#        fstype: "{{ disks.additional_disks[0].filesystem }}"
#        dev: "/dev/{{ disks.additional_disks[0].device }}"
#
#    - 
#      name: "Mounting Partitions"
#      ansible.builtin.mount:
#        path: "{{ disks.additional_disks[0].mount }}"
#        src: "/dev/{{ disks.additional_disks[0].device }}"
#        fstype: "{{ disks.additional_disks[0].filesystem }}"
#        state: mounted

-
  name: "Configuring Extra Disks"
  become: true
  become_user: root
  when: 
    - disks.additional_disks is defined
    - disks.additional_disks | length > 0
  block:
    - 
      name: "Gathering disk information"
      block:
        - 
          name: "Identifying available disks"
          ansible.builtin.shell: "lsblk -no NAME -x NAME | grep -v {{ root_disk }}"
          register: lsblk_output

        - name: "Parsing available disks"
          set_fact:
            available_disks: "{{ lsblk_output.stdout_lines }}"

        - name: "Debug: available_disks"
          debug:
            var: available_disks

    - 
      name: "Creating Mount Points"
      ansible.builtin.file:
        path: "{{ item.mount }}"
        state: directory
      loop: "{{ disks.additional_disks }}"

    - 
      name: "Creating filesystems on additional disks"
      ansible.builtin.filesystem:
        fstype: "{{ item.filesystem }}"
        dev: "/dev/{{ available_disks[index] }}"
      loop: "{{ disks.additional_disks }}"
      loop_control:
        index_var: index

    - 
      name: "Mounting additional disks"
      ansible.builtin.mount:
        path: "{{ item.mount }}"
        src: "/dev/{{ available_disks[index] }}"
        fstype: "{{ item.filesystem }}"
        state: mounted
      loop: "{{ disks.additional_disks }}"
      loop_control:
        index_var: index