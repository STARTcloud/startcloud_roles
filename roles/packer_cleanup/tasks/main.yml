---
-
  name: "Ensuring apt cache is updated."
  ansible.builtin.apt:
    cache_valid_time: 3600
    update_cache: true
  when: "ansible_os_family == 'Debian'"

-
  name: "Upgrading all apt packages"
  ansible.builtin.apt:
    force_apt_get: true
    upgrade: dist
  when: "ansible_os_family == 'Debian'"

-
  name: "Removing useless packages from the cache"
  ansible.builtin.apt:
    autoclean: yes

-
  name: "Remove dependencies that are no longer required"
  ansible.builtin.apt:
    autoremove: yes

- 
  name: "Running apt-get clean"
  apt:
    clean: yes

-
  name: "Removing unneeded packages."
  ansible.builtin.apt:
    name:
      - linux-source
      - popularity-contest
      - landscape-common
      - gnome-initial-setup
    state: absent
  when: "ansible_os_family == 'Debian'"

#-
#  name: "Removing Uneeded Dev Packages, Docs and Man Pages"
#  shell: "{{ item }}"
#  when: "ansible_os_family == 'Debian'"
#  with_items:
#    - "dpkg --list | awk '{ print $2 }' | grep linux-source | xargs apt-get -y purge"
#    - "dpkg --list | awk '{ print $2 }' | grep -- '-doc$' | xargs apt-get -y purge"
#

#
#-
#  name: "Using Deborphan to clean up packages."
#  shell: "{{ item }}"
#  when: "ansible_os_family == 'Debian'"
#  with_items:
#    - "deborphan --find-config | xargs apt-get -y purge"
#    - "deborphan | xargs apt-get -y purge"
#
#-
#  name: "Registering Apt Cache files"
#  ansible.builtin.find:
#    file_type: directory
#    paths: /var/lib/apt
#  register: aptcache_files_to_delete
#  when: "ansible_os_family == 'Debian'"
#
#-
#  name: "Removing all Apt Cache files to delete"
#  ansible.builtin.file:
#    path: "{{ item.path }}"
#    state: absent
#  when: "ansible_os_family == 'Debian'"
#  with_items: "{{ aptcache_files_to_delete.files }}"
#
#-
#  name: "Removing Apt Caches"
#  ansible.builtin.find:
#    file_type: directory
#    paths: /var/cache
#  register: cache_files_to_delete
#  when: "ansible_os_family == 'Debian'"
#
#-
#  name: "Removing all Apt Cache files to delete"
#  ansible.builtin.file:
#    path: "{{ item.path }}"
#    state: absent
#  when: "ansible_os_family == 'Debian'"
#  with_items: "{{ cache_files_to_delete.files }}"
#
#-
#  name: "Removing useless packages from the cache"
#  ansible.builtin.apt:
#    autoclean: true
#  when: "ansible_os_family == 'Debian'"
#  
#-
#  name: "Purging and Autoremove"
#  ansible.builtin.apt:
#    autoremove: true
#    purge: true
#  when: "ansible_os_family == 'Debian'"

-
  name: "Cleaning up udev rules"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  when: "ansible_os_family == 'Debian'"
  with_items:
    - /dev/.udev/
    - /lib/udev/rules.d/75-persistent-net-generator.rules

-
  name: "Cleaning leftover DHCP Leases"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  when: "ansible_os_family == 'Debian'"
  with_items:
    - /var/lib/dhcp3/*
    - /var/lib/dhcp/*

-
  name: "Truncating Machine ID"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  when: "ansible_os_family == 'Debian'"
  with_items:
    - /etc/machine-id

-
  name: "Truncating Machine ID"
  ansible.builtin.copy:
    content: ""
    dest: "{{ item }}"
    force: false
  when: "ansible_os_family == 'Debian'"
  with_items:
    - /etc/machine-id

-
  name: "Unsetting the Machine ID."
  ignore_errors: true
  ansible.builtin.shell: "rm /var/lib/dbus/machine-id"
  when: "ansible_os_family == 'Debian'"

-
  name: "Linking Machine ID file"
  ansible.builtin.shell: "ln -s /etc/machine-id /var/lib/dbus/machine-id"
  when: "ansible_os_family == 'Debian'"

-
  name: "Finding /var/log files.old or .log via regex"
  ansible.builtin.find:
    paths: /var/log
    patterns: "^.*?\\.(?:old|log\\.gz)$"
    use_regex: true
  register: log_files_to_delete

-
  name: "Ansible remove file wildcard"
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ log_files_to_delete.files }}"

-
  name: "Removing Caches, Logs, Docs, Man Pages, History, Tmp"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  when: "ansible_os_family == 'Debian'"
  with_items:
    - /var/log/lastlog
    - /var/log/wtmp
    - /var/log/btmp

-
  name: "Truncating Audit Logs"
  ansible.builtin.copy:
    content: ""
    dest: "{{ item }}"
    force: false
  when: "ansible_os_family == 'Debian'"
  with_items:
    - /var/log/lastlog
    - /var/log/wtmp
    - /var/log/btmp

-
  name: "Unsetting the History File."
  ansible.builtin.shell: "unset HISTFILE"

-
  name: "Clearing out all logs in Subfolder of Log Dir"
  ansible.builtin.shell: 'find /var/log -type f | while read f; do echo -ne '''' > "${f}"; done;'

-
  name: "Removing Caches, Logs, Docs, Man Pages, History, Tmp"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /root/.bash_history
    - "/home/{{ user }}/.bash_history"
    - /usr/share/doc/*
    - /usr/share/man/*
    - /tmp/*

-
  name: "Recreating TMP, Doc and Man"
  ansible.builtin.file:
    path: "{{ item }}"
  when: "ansible_os_family == 'Debian'"
  with_items:
    - /usr/share/doc/
    - /usr/share/man/
    - /tmp/
